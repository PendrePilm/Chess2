{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: \"GameBoard\",\n  props: ['gameCode', 'playerColor'],\n  data() {\n    return {\n      board: [],\n      selectedSquare: null,\n      turn: \"w\",\n      // \"w\" = blanc, \"b\" = noir\n      pieceImages: {\n        wp: require('@/img/pions/w/pawn.png'),\n        bp: require('@/img/pions/b/pawn.png'),\n        wr: require('@/img/pions/w/rook.png'),\n        br: require('@/img/pions/b/rook.png'),\n        wn: require('@/img/pions/w/knight.png'),\n        bn: require('@/img/pions/b/knight.png'),\n        wb: require('@/img/pions/w/bishop.png'),\n        bb: require('@/img/pions/b/bishop.png'),\n        wq: require('@/img/pions/w/queen.png'),\n        bq: require('@/img/pions/b/queen.png'),\n        wk: require('@/img/pions/w/king.png'),\n        bk: require('@/img/pions/b/king.png')\n      }\n    };\n  },\n  created() {\n    this.board = this.initializeBoard();\n  },\n  methods: {\n    // Initialiser le plateau de jeu avec les positions des pièces\n    initializeBoard() {\n      if (this.playerColor === 'b') {\n        // Si le joueur joue avec les noirs, on inverse les positions des pièces\n        return [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"];\n      } else {\n        // Sinon, si le joueur joue avec les blancs, on garde l'ordre par défaut\n        return [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"];\n      }\n    },\n    // Gérer le clic sur une case du plateau\n    handleSquareClick(index) {\n      if (this.selectedSquare === null) {\n        // Sélectionner une pièce si elle appartient au joueur\n        if (this.board[index] && this.board[index][0] === this.turn) {\n          this.selectedSquare = index; // Sélectionner la pièce\n        }\n      } else {\n        // Si une pièce est sélectionnée, tenter de déplacer\n        const validMove = this.isValidMove(this.selectedSquare, index);\n        if (validMove) {\n          // Déplacer la pièce sur l'échiquier\n          this.board[index] = this.board[this.selectedSquare]; // Déplacer la pièce\n          this.board[this.selectedSquare] = \"\"; // Vider l'ancienne case\n          this.selectedSquare = null; // Désélectionner la pièce\n          this.turn = this.turn === \"w\" ? \"b\" : \"w\"; // Changer de tour\n        } else {\n          // Si le mouvement n'est pas valide, désélectionner la pièce\n          this.selectedSquare = null;\n        }\n      }\n    },\n    // Vérifier si le mouvement est valide en fonction du type de pièce\n    isValidMove(from, to) {\n      const piece = this.board[from];\n      const targetPiece = this.board[to];\n\n      // Vérifier qu'une pièce est sélectionnée\n      if (!piece) return false;\n      const pieceType = piece[1]; // Le type de la pièce (p, r, n, b, q, k)\n      const pieceColor = piece[0]; // La couleur de la pièce (w pour blanc, b pour noir)\n\n      // Si la pièce et la cible sont de la même couleur, c'est un mouvement invalide\n      if (targetPiece && targetPiece[0] === pieceColor) {\n        return false;\n      }\n\n      // Pion (déplacement d'une case vers l'avant, capture en diagonale)\n      if (pieceType === 'p') {\n        return this.isValidPawnMove(from, to, pieceColor);\n      }\n\n      // Tour (déplacement horizontal ou vertical)\n      if (pieceType === 'r') {\n        return this.isValidRookMove(from, to);\n      }\n\n      // Cavalier (déplacement en L)\n      if (pieceType === 'n') {\n        return this.isValidKnightMove(from, to);\n      }\n\n      // Fou (déplacement en diagonale)\n      if (pieceType === 'b') {\n        return this.isValidBishopMove(from, to);\n      }\n\n      // Reine (combinaison de la tour et du fou)\n      if (pieceType === 'q') {\n        return this.isValidQueenMove(from, to);\n      }\n\n      // Roi (déplacement d'une case dans toutes les directions)\n      if (pieceType === 'k') {\n        return this.isValidKingMove(from, to);\n      }\n      return false;\n    },\n    // Vérifier si un mouvement de pion est valide\n    isValidPawnMove(from, to, color) {\n      const direction = color === 'w' ? -1 : 1;\n      const row = Math.floor(from / 8);\n      const col = from % 8;\n      const targetRow = Math.floor(to / 8);\n      const targetCol = to % 8;\n\n      // Déplacement d'une case en avant\n      if (col === targetCol && targetRow === row + direction && this.board[to] === \"\") {\n        return true;\n      }\n\n      // Déplacement de deux cases en avant (seulement pour le premier mouvement)\n      if (col === targetCol && targetRow === row + 2 * direction && row === (color === 'w' ? 6 : 1) && this.board[to] === \"\" && this.board[from + direction * 8] === \"\") {\n        return true;\n      }\n\n      // Capture en diagonale\n      if (Math.abs(col - targetCol) === 1 && targetRow === row + direction && this.board[to] !== \"\" && this.board[to][0] !== color) {\n        return true;\n      }\n      return false;\n    },\n    // Vérifier si un mouvement de tour est valide\n    isValidRookMove(from, to) {\n      const row1 = Math.floor(from / 8);\n      const col1 = from % 8;\n      const row2 = Math.floor(to / 8);\n      const col2 = to % 8;\n\n      // Déplacement horizontal ou vertical\n      if (row1 === row2) {\n        // Déplacement horizontal\n        const start = Math.min(col1, col2) + 1;\n        const end = Math.max(col1, col2);\n        for (let i = start; i < end; i++) {\n          if (this.board[row1 * 8 + i] !== \"\") {\n            return false; // Il y a une pièce dans le chemin\n          }\n        }\n        return true;\n      } else if (col1 === col2) {\n        // Déplacement vertical\n        const start = Math.min(row1, row2) + 1;\n        const end = Math.max(row1, row2);\n        for (let i = start; i < end; i++) {\n          if (this.board[i * 8 + col1] !== \"\") {\n            return false; // Il y a une pièce dans le chemin\n          }\n        }\n        return true;\n      }\n      return false;\n    },\n    // Vérifier si un mouvement de cavalier est valide\n    isValidKnightMove(from, to) {\n      const row1 = Math.floor(from / 8);\n      const col1 = from % 8;\n      const row2 = Math.floor(to / 8);\n      const col2 = to % 8;\n      const rowDiff = Math.abs(row1 - row2);\n      const colDiff = Math.abs(col1 - col2);\n      return rowDiff === 2 && colDiff === 1 || rowDiff === 1 && colDiff === 2;\n    },\n    // Vérifier si un mouvement de fou est valide\n    isValidBishopMove(from, to) {\n      const row1 = Math.floor(from / 8);\n      const col1 = from % 8;\n      const row2 = Math.floor(to / 8);\n      const col2 = to % 8;\n      return Math.abs(row1 - row2) === Math.abs(col1 - col2);\n    },\n    // Vérifier si un mouvement de reine est valide\n    isValidQueenMove(from, to) {\n      return this.isValidRookMove(from, to) || this.isValidBishopMove(from, to);\n    },\n    // Vérifier si un mouvement de roi est valide\n    isValidKingMove(from, to) {\n      const row1 = Math.floor(from / 8);\n      const col1 = from % 8;\n      const row2 = Math.floor(to / 8);\n      const col2 = to % 8;\n      return Math.abs(row1 - row2) <= 1 && Math.abs(col1 - col2) <= 1;\n    },\n    // Récupérer la classe CSS pour une case (pour les couleurs beige ou marron)\n    getSquareClass(index) {\n      const row = Math.floor(index / 8);\n      const col = index % 8;\n      return (row + col) % 2 === 0 ? 'beige' : 'brown';\n    },\n    // Se déconnecter de la session\n    async logout() {\n      try {\n        await axios.post('http://localhost:8000/logout/');\n        localStorage.removeItem('userPseudo');\n        localStorage.removeItem('userEmail');\n        localStorage.removeItem('userNom');\n        localStorage.removeItem('userPrenom');\n        this.$router.push('/login');\n      } catch (error) {\n        console.error(\"Erreur lors de la déconnexion :\", error.response ? error.response.data : error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","data","board","selectedSquare","turn","pieceImages","wp","require","bp","wr","br","wn","bn","wb","bb","wq","bq","wk","bk","created","initializeBoard","methods","playerColor","handleSquareClick","index","validMove","isValidMove","from","to","piece","targetPiece","pieceType","pieceColor","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","color","direction","row","Math","floor","col","targetRow","targetCol","abs","row1","col1","row2","col2","start","min","end","max","i","rowDiff","colDiff","getSquareClass","logout","post","localStorage","removeItem","$router","push","error","console","response","message"],"sources":["C:\\wamp64\\www\\Chess\\frontend\\src\\components\\GameBoard.vue"],"sourcesContent":["<template>\r\n    <div class=\"game-container\">\r\n      <aside class=\"sidebar\">\r\n        <nav>\r\n          <ul>\r\n            <li><router-link to=\"/menu\">Accueil</router-link></li>\r\n            <li><router-link to=\"/parametres\">Paramètres</router-link></li>\r\n            <li><a href=\"#\" @click.prevent=\"logout\">Déconnexion</a></li>\r\n          </ul>\r\n        </nav>\r\n      </aside>\r\n  \r\n      <div class=\"board-container\">\r\n        <h2>Partie d'Échecs</h2>\r\n        <p>Code de la partie : {{ gameCode }}</p>\r\n        <p>Vous jouez les : {{ playerColor === 'w' ? 'Blancs' : 'Noirs' }}</p>\r\n        <p>Tour actuel : {{ turn === 'w' ? 'Blancs' : 'Noirs' }}</p>\r\n  \r\n        <div id=\"chessboard\" class=\"chessboard\">\r\n          <div \r\n            v-for=\"(piece, index) in board\" \r\n            :key=\"index\" \r\n            class=\"square\" \r\n            :class=\"getSquareClass(index)\" \r\n            @click=\"handleSquareClick(index)\"\r\n          >\r\n            <img v-if=\"piece\" :src=\"pieceImages[piece]\" class=\"piece\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    name: \"GameBoard\",\r\n    props: ['gameCode', 'playerColor'],\r\n    data() {\r\n      return {\r\n        board: [],\r\n        selectedSquare: null,\r\n        turn: \"w\", // \"w\" = blanc, \"b\" = noir\r\n        pieceImages: {\r\n          wp: require('@/img/pions/w/pawn.png'),\r\n          bp: require('@/img/pions/b/pawn.png'),\r\n          wr: require('@/img/pions/w/rook.png'),\r\n          br: require('@/img/pions/b/rook.png'),\r\n          wn: require('@/img/pions/w/knight.png'),\r\n          bn: require('@/img/pions/b/knight.png'),\r\n          wb: require('@/img/pions/w/bishop.png'),\r\n          bb: require('@/img/pions/b/bishop.png'),\r\n          wq: require('@/img/pions/w/queen.png'),\r\n          bq: require('@/img/pions/b/queen.png'),\r\n          wk: require('@/img/pions/w/king.png'),\r\n          bk: require('@/img/pions/b/king.png'),\r\n        }\r\n      };\r\n    },\r\n    created() {\r\n      this.board = this.initializeBoard();\r\n    },\r\n    methods: {\r\n      // Initialiser le plateau de jeu avec les positions des pièces\r\n      initializeBoard() {\r\n        if (this.playerColor === 'b') {\r\n          // Si le joueur joue avec les noirs, on inverse les positions des pièces\r\n          return [\r\n            \"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\",\r\n            \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\",\r\n            \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n            \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n            \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n            \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n            \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\",\r\n            \"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"\r\n          ];\r\n        } else {\r\n          // Sinon, si le joueur joue avec les blancs, on garde l'ordre par défaut\r\n          return [\r\n            \"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\",\r\n            \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\",\r\n            \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n            \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n            \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n            \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n            \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\",\r\n            \"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"\r\n          ];\r\n        }\r\n      },\r\n  \r\n      // Gérer le clic sur une case du plateau\r\n      handleSquareClick(index) {\r\n        if (this.selectedSquare === null) {\r\n          // Sélectionner une pièce si elle appartient au joueur\r\n          if (this.board[index] && this.board[index][0] === this.turn) {\r\n            this.selectedSquare = index; // Sélectionner la pièce\r\n          }\r\n        } else {\r\n          // Si une pièce est sélectionnée, tenter de déplacer\r\n          const validMove = this.isValidMove(this.selectedSquare, index);\r\n          if (validMove) {\r\n            // Déplacer la pièce sur l'échiquier\r\n            this.board[index] = this.board[this.selectedSquare];  // Déplacer la pièce\r\n            this.board[this.selectedSquare] = \"\";  // Vider l'ancienne case\r\n            this.selectedSquare = null;  // Désélectionner la pièce\r\n            this.turn = this.turn === \"w\" ? \"b\" : \"w\"; // Changer de tour\r\n          } else {\r\n            // Si le mouvement n'est pas valide, désélectionner la pièce\r\n            this.selectedSquare = null;\r\n          }\r\n        }\r\n      },\r\n  \r\n      // Vérifier si le mouvement est valide en fonction du type de pièce\r\n      isValidMove(from, to) {\r\n        const piece = this.board[from];\r\n        const targetPiece = this.board[to];\r\n  \r\n        // Vérifier qu'une pièce est sélectionnée\r\n        if (!piece) return false;\r\n  \r\n        const pieceType = piece[1]; // Le type de la pièce (p, r, n, b, q, k)\r\n        const pieceColor = piece[0]; // La couleur de la pièce (w pour blanc, b pour noir)\r\n  \r\n        // Si la pièce et la cible sont de la même couleur, c'est un mouvement invalide\r\n        if (targetPiece && targetPiece[0] === pieceColor) {\r\n          return false;\r\n        }\r\n  \r\n        // Pion (déplacement d'une case vers l'avant, capture en diagonale)\r\n        if (pieceType === 'p') {\r\n          return this.isValidPawnMove(from, to, pieceColor);\r\n        }\r\n  \r\n        // Tour (déplacement horizontal ou vertical)\r\n        if (pieceType === 'r') {\r\n          return this.isValidRookMove(from, to);\r\n        }\r\n  \r\n        // Cavalier (déplacement en L)\r\n        if (pieceType === 'n') {\r\n          return this.isValidKnightMove(from, to);\r\n        }\r\n  \r\n        // Fou (déplacement en diagonale)\r\n        if (pieceType === 'b') {\r\n          return this.isValidBishopMove(from, to);\r\n        }\r\n  \r\n        // Reine (combinaison de la tour et du fou)\r\n        if (pieceType === 'q') {\r\n          return this.isValidQueenMove(from, to);\r\n        }\r\n  \r\n        // Roi (déplacement d'une case dans toutes les directions)\r\n        if (pieceType === 'k') {\r\n          return this.isValidKingMove(from, to);\r\n        }\r\n  \r\n        return false;\r\n      },\r\n  \r\n      // Vérifier si un mouvement de pion est valide\r\n      isValidPawnMove(from, to, color) {\r\n        const direction = color === 'w' ? -1 : 1;\r\n        const row = Math.floor(from / 8);\r\n        const col = from % 8;\r\n        const targetRow = Math.floor(to / 8);\r\n        const targetCol = to % 8;\r\n  \r\n        // Déplacement d'une case en avant\r\n        if (col === targetCol && targetRow === row + direction && this.board[to] === \"\") {\r\n          return true;\r\n        }\r\n  \r\n        // Déplacement de deux cases en avant (seulement pour le premier mouvement)\r\n        if (col === targetCol && targetRow === row + 2 * direction && row === (color === 'w' ? 6 : 1) && this.board[to] === \"\" && this.board[from + direction * 8] === \"\") {\r\n          return true;\r\n        }\r\n  \r\n        // Capture en diagonale\r\n        if (Math.abs(col - targetCol) === 1 && targetRow === row + direction && this.board[to] !== \"\" && this.board[to][0] !== color) {\r\n          return true;\r\n        }\r\n  \r\n        return false;\r\n      },\r\n  \r\n      // Vérifier si un mouvement de tour est valide\r\n      isValidRookMove(from, to) {\r\n        const row1 = Math.floor(from / 8);\r\n        const col1 = from % 8;\r\n        const row2 = Math.floor(to / 8);\r\n        const col2 = to % 8;\r\n  \r\n        // Déplacement horizontal ou vertical\r\n        if (row1 === row2) {\r\n          // Déplacement horizontal\r\n          const start = Math.min(col1, col2) + 1;\r\n          const end = Math.max(col1, col2);\r\n          for (let i = start; i < end; i++) {\r\n            if (this.board[row1 * 8 + i] !== \"\") {\r\n              return false;  // Il y a une pièce dans le chemin\r\n            }\r\n          }\r\n          return true;\r\n        } else if (col1 === col2) {\r\n          // Déplacement vertical\r\n          const start = Math.min(row1, row2) + 1;\r\n          const end = Math.max(row1, row2);\r\n          for (let i = start; i < end; i++) {\r\n            if (this.board[i * 8 + col1] !== \"\") {\r\n              return false;  // Il y a une pièce dans le chemin\r\n            }\r\n          }\r\n          return true;\r\n        }\r\n  \r\n        return false;\r\n      },\r\n  \r\n      // Vérifier si un mouvement de cavalier est valide\r\n      isValidKnightMove(from, to) {\r\n        const row1 = Math.floor(from / 8);\r\n        const col1 = from % 8;\r\n        const row2 = Math.floor(to / 8);\r\n        const col2 = to % 8;\r\n  \r\n        const rowDiff = Math.abs(row1 - row2);\r\n        const colDiff = Math.abs(col1 - col2);\r\n  \r\n        return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);\r\n      },\r\n  \r\n      // Vérifier si un mouvement de fou est valide\r\n      isValidBishopMove(from, to) {\r\n        const row1 = Math.floor(from / 8);\r\n        const col1 = from % 8;\r\n        const row2 = Math.floor(to / 8);\r\n        const col2 = to % 8;\r\n  \r\n        return Math.abs(row1 - row2) === Math.abs(col1 - col2);\r\n      },\r\n  \r\n      // Vérifier si un mouvement de reine est valide\r\n      isValidQueenMove(from, to) {\r\n        return this.isValidRookMove(from, to) || this.isValidBishopMove(from, to);\r\n      },\r\n  \r\n      // Vérifier si un mouvement de roi est valide\r\n      isValidKingMove(from, to) {\r\n        const row1 = Math.floor(from / 8);\r\n        const col1 = from % 8;\r\n        const row2 = Math.floor(to / 8);\r\n        const col2 = to % 8;\r\n  \r\n        return Math.abs(row1 - row2) <= 1 && Math.abs(col1 - col2) <= 1;\r\n      },\r\n  \r\n      // Récupérer la classe CSS pour une case (pour les couleurs beige ou marron)\r\n      getSquareClass(index) {\r\n        const row = Math.floor(index / 8);\r\n        const col = index % 8;\r\n        return (row + col) % 2 === 0 ? 'beige' : 'brown';\r\n      },\r\n  \r\n      // Se déconnecter de la session\r\n      async logout() {\r\n        try {\r\n          await axios.post('http://localhost:8000/logout/');\r\n          localStorage.removeItem('userPseudo');\r\n          localStorage.removeItem('userEmail');\r\n          localStorage.removeItem('userNom');\r\n          localStorage.removeItem('userPrenom');\r\n          this.$router.push('/login');\r\n        } catch (error) {\r\n          console.error(\"Erreur lors de la déconnexion :\", error.response ? error.response.data : error.message);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .game-container {\r\n    display: flex;\r\n  }\r\n  \r\n  .sidebar {\r\n    width: 200px;\r\n    background-color: #1f1f1f;\r\n    padding: 20px;\r\n    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.5);\r\n  }\r\n  \r\n  .sidebar nav ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n  }\r\n  \r\n  .sidebar nav ul li {\r\n    margin: 15px 0;\r\n  }\r\n  \r\n  .sidebar nav ul li a {\r\n    color: #e0e0e0;\r\n    text-decoration: none;\r\n  }\r\n  \r\n  .sidebar nav ul li a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  \r\n  .board-container {\r\n    flex-grow: 1;\r\n    padding: 20px;\r\n    text-align: center;\r\n  }\r\n  \r\n  .chessboard {\r\n    display: grid;\r\n    grid-template-columns: repeat(8, 80px);\r\n    grid-template-rows: repeat(8, 80px);\r\n    border: 2px solid #333;\r\n    width: 640px;\r\n    height: 640px;\r\n    margin: 20px auto;\r\n  }\r\n  \r\n  .square {\r\n    width: 80px;\r\n    height: 80px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 24px;\r\n    border: 1px solid black;\r\n    position: relative;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n  }\r\n  \r\n  .square:hover {\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .square.beige {\r\n    background-color: #f5f5dc;\r\n  }\r\n  \r\n  .square.brown {\r\n    background-color: #8b4513;\r\n  }\r\n  \r\n  .square.selected {\r\n    border: 3px solid #f39c12;\r\n  }\r\n  \r\n  .piece {\r\n    width: 60%;\r\n    height: 60%;\r\n    object-fit: contain;\r\n    pointer-events: none;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}