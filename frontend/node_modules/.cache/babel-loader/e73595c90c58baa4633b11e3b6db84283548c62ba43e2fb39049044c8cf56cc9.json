{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: \"GameBoard\",\n  props: ['gameCode', 'playerColor'],\n  data() {\n    return {\n      board: [],\n      selectedSquare: null,\n      turn: \"w\",\n      // \"w\" = blanc, \"b\" = noir\n      check: false,\n      checkmate: false,\n      pieceImages: {\n        wp: require('@/img/pions/w/pawn.png'),\n        bp: require('@/img/pions/b/pawn.png'),\n        wr: require('@/img/pions/w/rook.png'),\n        br: require('@/img/pions/b/rook.png'),\n        wn: require('@/img/pions/w/knight.png'),\n        bn: require('@/img/pions/b/knight.png'),\n        wb: require('@/img/pions/w/bishop.png'),\n        bb: require('@/img/pions/b/bishop.png'),\n        wq: require('@/img/pions/w/queen.png'),\n        bq: require('@/img/pions/b/queen.png'),\n        wk: require('@/img/pions/w/king.png'),\n        bk: require('@/img/pions/b/king.png')\n      }\n    };\n  },\n  created() {\n    this.board = this.initializeBoard();\n  },\n  methods: {\n    // Initialiser le plateau de jeu avec les positions des pièces\n    initializeBoard() {\n      if (this.playerColor === 'b') {\n        return [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"];\n      } else {\n        return [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"];\n      }\n    },\n    // Gérer le clic sur une case du plateau\n    handleSquareClick(index) {\n      if (this.selectedSquare === null) {\n        if (this.board[index] && this.board[index][0] === this.turn) {\n          this.selectedSquare = index;\n        }\n      } else {\n        const validMove = this.isValidMove(this.selectedSquare, index);\n        if (validMove) {\n          this.board[index] = this.board[this.selectedSquare];\n          this.board[this.selectedSquare] = \"\";\n          this.selectedSquare = null;\n          this.turn = this.turn === \"w\" ? \"b\" : \"w\";\n\n          // Vérifier l'échec et l'échec et mat après le mouvement\n          this.check = this.isKingInCheck(this.board, this.turn);\n          this.checkmate = this.isCheckmate(this.board, this.turn);\n        } else {\n          this.selectedSquare = null;\n        }\n      }\n    },\n    // Vérifier si le mouvement est valide en fonction du type de pièce\n    isValidMove(from, to) {\n      const piece = this.board[from];\n      const targetPiece = this.board[to];\n      if (!piece) return false;\n      const pieceType = piece[1];\n      const pieceColor = piece[0];\n      if (targetPiece && targetPiece[0] === pieceColor) {\n        return false;\n      }\n      if (pieceType === 'p') {\n        return this.isValidPawnMove(from, to, pieceColor);\n      }\n      if (pieceType === 'r') {\n        return this.isValidRookMove(from, to);\n      }\n      if (pieceType === 'n') {\n        return this.isValidKnightMove(from, to);\n      }\n      if (pieceType === 'b') {\n        return this.isValidBishopMove(from, to);\n      }\n      if (pieceType === 'q') {\n        return this.isValidQueenMove(from, to);\n      }\n      if (pieceType === 'k') {\n        return this.isValidKingMove(from, to);\n      }\n      return false;\n    },\n    // Vérifier si un mouvement de pion est valide\n    isValidPawnMove(from, to, color) {\n      const direction = color === 'w' ? -1 : 1;\n      const row = Math.floor(from / 8);\n      const col = from % 8;\n      const targetRow = Math.floor(to / 8);\n      const targetCol = to % 8;\n      if (col === targetCol && targetRow === row + direction && this.board[to] === \"\") {\n        return true;\n      }\n      if (col === targetCol && targetRow === row + 2 * direction && row === (color === 'w' ? 6 : 1) && this.board[to] === \"\" && this.board[from + direction * 8] === \"\") {\n        return true;\n      }\n      if (Math.abs(col - targetCol) === 1 && targetRow === row + direction && this.board[to] !== \"\" && this.board[to][0] !== color) {\n        return true;\n      }\n      return false;\n    },\n    // Vérifier si un mouvement de tour est valide\n    isValidRookMove(from, to) {\n      const row1 = Math.floor(from / 8);\n      const col1 = from % 8;\n      const row2 = Math.floor(to / 8);\n      const col2 = to % 8;\n      if (row1 === row2) {\n        const start = Math.min(col1, col2) + 1;\n        const end = Math.max(col1, col2);\n        for (let i = start; i < end; i++) {\n          if (this.board[row1 * 8 + i] !== \"\") {\n            return false;\n          }\n        }\n        return true;\n      } else if (col1 === col2) {\n        const start = Math.min(row1, row2) + 1;\n        const end = Math.max(row1, row2);\n        for (let i = start; i < end; i++) {\n          if (this.board[i * 8 + col1] !== \"\") {\n            return false;\n          }\n        }\n        return true;\n      }\n      return false;\n    },\n    // Vérifier si un mouvement de cavalier est valide\n    isValidKnightMove(from, to) {\n      const row1 = Math.floor(from / 8);\n      const col1 = from % 8;\n      const row2 = Math.floor(to / 8);\n      const col2 = to % 8;\n      const rowDiff = Math.abs(row1 - row2);\n      const colDiff = Math.abs(col1 - col2);\n      return rowDiff === 2 && colDiff === 1 || rowDiff === 1 && colDiff === 2;\n    },\n    // Vérifier si un mouvement de fou est valide\n    isValidBishopMove(from, to) {\n      const row1 = Math.floor(from / 8);\n      const col1 = from % 8;\n      const row2 = Math.floor(to / 8);\n      const col2 = to % 8;\n      return Math.abs(row1 - row2) === Math.abs(col1 - col2);\n    },\n    // Vérifier si un mouvement de reine est valide\n    isValidQueenMove(from, to) {\n      return this.isValidRookMove(from, to) || this.isValidBishopMove(from, to);\n    },\n    // Vérifier si un mouvement de roi est valide\n    isValidKingMove(from, to) {\n      const row1 = Math.floor(from / 8);\n      const col1 = from % 8;\n      const row2 = Math.floor(to / 8);\n      const col2 = to % 8;\n      return Math.abs(row1 - row2) <= 1 && Math.abs(col1 - col2) <= 1;\n    },\n    // Récupérer la classe CSS pour une case (pour les couleurs beige ou marron)\n    getSquareClass(index) {\n      const row = Math.floor(index / 8);\n      const col = index % 8;\n      return (row + col) % 2 === 0 ? 'beige' : 'brown';\n    },\n    // Vérifier si le roi est en échec\n    isKingInCheck(board, color) {\n      const kingPosition = this.findKingPosition(board, color);\n      return this.isSquareUnderAttack(board, kingPosition, color);\n    },\n    // Trouver la position du roi\n    findKingPosition(board, color) {\n      for (let i = 0; i < board.length; i++) {\n        if (board[i] === `${color}k`) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    // Vérifier si une case est sous attaque\n    isSquareUnderAttack(board, squareIndex, color) {\n      const opponentColor = color === 'w' ? 'b' : 'w';\n      const pawnAttacks = this.getPawnAttacks(squareIndex, opponentColor);\n      for (const attack of pawnAttacks) {\n        if (board[attack] === `${opponentColor}p`) {\n          return true;\n        }\n      }\n      const knightAttacks = this.getKnightAttacks(squareIndex);\n      for (const attack of knightAttacks) {\n        if (board[attack] === `${opponentColor}n`) {\n          return true;\n        }\n      }\n      const straightAttacks = this.getStraightAttacks(squareIndex);\n      const diagonalAttacks = this.getDiagonalAttacks(squareIndex);\n      for (const attack of straightAttacks) {\n        if (board[attack] === `${opponentColor}r` || board[attack] === `${opponentColor}q`) {\n          return true;\n        }\n      }\n      for (const attack of diagonalAttacks) {\n        if (board[attack] === `${opponentColor}b` || board[attack] === `${opponentColor}q`) {\n          return true;\n        }\n      }\n      return false;\n    },\n    // Vérifier si c'est un échec et mat\n    isCheckmate(board, color) {\n      if (!this.isKingInCheck(board, color)) {\n        return false;\n      }\n      const possibleMoves = this.generateAllMoves(board, color);\n      for (const move of possibleMoves) {\n        const newBoard = this.applyMove(board, move);\n        if (!this.isKingInCheck(newBoard, color)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    // Générer tous les mouvements possibles\n    generateAllMoves(board, color) {\n      const moves = [];\n      for (let i = 0; i < board.length; i++) {\n        if (board[i] && board[i][0] === color) {\n          const pieceType = board[i][1];\n          if (pieceType === 'p') {\n            moves.push(...this.generatePawnMoves(i, color));\n          } else if (pieceType === 'r') {\n            moves.push(...this.generateRookMoves(i));\n          } else if (pieceType === 'n') {\n            moves.push(...this.generateKnightMoves(i));\n          } else if (pieceType === 'b') {\n            moves.push(...this.generateBishopMoves(i));\n          } else if (pieceType === 'q') {\n            moves.push(...this.generateQueenMoves(i));\n          } else if (pieceType === 'k') {\n            moves.push(...this.generateKingMoves(i));\n          }\n        }\n      }\n      return moves;\n    },\n    // Appliquer un mouvement à l'échiquier\n    applyMove(board, move) {\n      const newBoard = board.slice();\n      newBoard[move.to] = newBoard[move.from];\n      newBoard[move.from] = \"\";\n      return newBoard;\n    },\n    // Se déconnecter de la session\n    async logout() {\n      try {\n        await axios.post('http://localhost:8000/logout/');\n        localStorage.removeItem('userPseudo');\n        localStorage.removeItem('userEmail');\n        localStorage.removeItem('userNom');\n        localStorage.removeItem('userPrenom');\n        this.$router.push('/login');\n      } catch (error) {\n        console.error(\"Erreur lors de la déconnexion :\", error.response ? error.response.data : error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","data","board","selectedSquare","turn","check","checkmate","pieceImages","wp","require","bp","wr","br","wn","bn","wb","bb","wq","bq","wk","bk","created","initializeBoard","methods","playerColor","handleSquareClick","index","validMove","isValidMove","isKingInCheck","isCheckmate","from","to","piece","targetPiece","pieceType","pieceColor","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","color","direction","row","Math","floor","col","targetRow","targetCol","abs","row1","col1","row2","col2","start","min","end","max","i","rowDiff","colDiff","getSquareClass","kingPosition","findKingPosition","isSquareUnderAttack","length","squareIndex","opponentColor","pawnAttacks","getPawnAttacks","attack","knightAttacks","getKnightAttacks","straightAttacks","getStraightAttacks","diagonalAttacks","getDiagonalAttacks","possibleMoves","generateAllMoves","move","newBoard","applyMove","moves","push","generatePawnMoves","generateRookMoves","generateKnightMoves","generateBishopMoves","generateQueenMoves","generateKingMoves","slice","logout","post","localStorage","removeItem","$router","error","console","response","message"],"sources":["C:\\wamp64\\www\\Chess\\frontend\\src\\components\\GameBoard.vue"],"sourcesContent":["<template>\r\n  <div class=\"game-container\">\r\n    <aside class=\"sidebar\">\r\n      <nav>\r\n        <ul>\r\n          <li><router-link to=\"/menu\">Accueil</router-link></li>\r\n          <li><router-link to=\"/parametres\">Paramètres</router-link></li>\r\n          <li><a href=\"#\" @click.prevent=\"logout\">Déconnexion</a></li>\r\n        </ul>\r\n      </nav>\r\n    </aside>\r\n\r\n    <div class=\"board-container\">\r\n      <h2>Partie d'Échecs</h2>\r\n      <p>Code de la partie : {{ gameCode }}</p>\r\n      <p>Vous jouez les : {{ playerColor === 'w' ? 'Blancs' : 'Noirs' }}</p>\r\n      <p>Tour actuel : {{ turn === 'w' ? 'Blancs' : 'Noirs' }}</p>\r\n\r\n      <div id=\"chessboard\" class=\"chessboard\">\r\n        <div\r\n          v-for=\"(piece, index) in board\"\r\n          :key=\"index\"\r\n          class=\"square\"\r\n          :class=\"getSquareClass(index)\"\r\n          @click=\"handleSquareClick(index)\"\r\n        >\r\n          <img v-if=\"piece\" :src=\"pieceImages[piece]\" class=\"piece\" />\r\n        </div>\r\n      </div>\r\n\r\n      <p v-if=\"check\">Échec!</p>\r\n      <p v-if=\"checkmate\">Échec et mat!</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: \"GameBoard\",\r\n  props: ['gameCode', 'playerColor'],\r\n  data() {\r\n    return {\r\n      board: [],\r\n      selectedSquare: null,\r\n      turn: \"w\", // \"w\" = blanc, \"b\" = noir\r\n      check: false,\r\n      checkmate: false,\r\n      pieceImages: {\r\n        wp: require('@/img/pions/w/pawn.png'),\r\n        bp: require('@/img/pions/b/pawn.png'),\r\n        wr: require('@/img/pions/w/rook.png'),\r\n        br: require('@/img/pions/b/rook.png'),\r\n        wn: require('@/img/pions/w/knight.png'),\r\n        bn: require('@/img/pions/b/knight.png'),\r\n        wb: require('@/img/pions/w/bishop.png'),\r\n        bb: require('@/img/pions/b/bishop.png'),\r\n        wq: require('@/img/pions/w/queen.png'),\r\n        bq: require('@/img/pions/b/queen.png'),\r\n        wk: require('@/img/pions/w/king.png'),\r\n        bk: require('@/img/pions/b/king.png'),\r\n      }\r\n    };\r\n  },\r\n  created() {\r\n    this.board = this.initializeBoard();\r\n  },\r\n  methods: {\r\n    // Initialiser le plateau de jeu avec les positions des pièces\r\n    initializeBoard() {\r\n      if (this.playerColor === 'b') {\r\n        return [\r\n          \"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\",\r\n          \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\",\r\n          \"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"\r\n        ];\r\n      } else {\r\n        return [\r\n          \"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\",\r\n          \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\",\r\n          \"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"\r\n        ];\r\n      }\r\n    },\r\n\r\n    // Gérer le clic sur une case du plateau\r\n    handleSquareClick(index) {\r\n      if (this.selectedSquare === null) {\r\n        if (this.board[index] && this.board[index][0] === this.turn) {\r\n          this.selectedSquare = index;\r\n        }\r\n      } else {\r\n        const validMove = this.isValidMove(this.selectedSquare, index);\r\n        if (validMove) {\r\n          this.board[index] = this.board[this.selectedSquare];\r\n          this.board[this.selectedSquare] = \"\";\r\n          this.selectedSquare = null;\r\n          this.turn = this.turn === \"w\" ? \"b\" : \"w\";\r\n\r\n          // Vérifier l'échec et l'échec et mat après le mouvement\r\n          this.check = this.isKingInCheck(this.board, this.turn);\r\n          this.checkmate = this.isCheckmate(this.board, this.turn);\r\n        } else {\r\n          this.selectedSquare = null;\r\n        }\r\n      }\r\n    },\r\n\r\n    // Vérifier si le mouvement est valide en fonction du type de pièce\r\n    isValidMove(from, to) {\r\n      const piece = this.board[from];\r\n      const targetPiece = this.board[to];\r\n\r\n      if (!piece) return false;\r\n\r\n      const pieceType = piece[1];\r\n      const pieceColor = piece[0];\r\n\r\n      if (targetPiece && targetPiece[0] === pieceColor) {\r\n        return false;\r\n      }\r\n\r\n      if (pieceType === 'p') {\r\n        return this.isValidPawnMove(from, to, pieceColor);\r\n      }\r\n\r\n      if (pieceType === 'r') {\r\n        return this.isValidRookMove(from, to);\r\n      }\r\n\r\n      if (pieceType === 'n') {\r\n        return this.isValidKnightMove(from, to);\r\n      }\r\n\r\n      if (pieceType === 'b') {\r\n        return this.isValidBishopMove(from, to);\r\n      }\r\n\r\n      if (pieceType === 'q') {\r\n        return this.isValidQueenMove(from, to);\r\n      }\r\n\r\n      if (pieceType === 'k') {\r\n        return this.isValidKingMove(from, to);\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    // Vérifier si un mouvement de pion est valide\r\n    isValidPawnMove(from, to, color) {\r\n      const direction = color === 'w' ? -1 : 1;\r\n      const row = Math.floor(from / 8);\r\n      const col = from % 8;\r\n      const targetRow = Math.floor(to / 8);\r\n      const targetCol = to % 8;\r\n\r\n      if (col === targetCol && targetRow === row + direction && this.board[to] === \"\") {\r\n        return true;\r\n      }\r\n\r\n      if (col === targetCol && targetRow === row + 2 * direction && row === (color === 'w' ? 6 : 1) && this.board[to] === \"\" && this.board[from + direction * 8] === \"\") {\r\n        return true;\r\n      }\r\n\r\n      if (Math.abs(col - targetCol) === 1 && targetRow === row + direction && this.board[to] !== \"\" && this.board[to][0] !== color) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    // Vérifier si un mouvement de tour est valide\r\n    isValidRookMove(from, to) {\r\n      const row1 = Math.floor(from / 8);\r\n      const col1 = from % 8;\r\n      const row2 = Math.floor(to / 8);\r\n      const col2 = to % 8;\r\n\r\n      if (row1 === row2) {\r\n        const start = Math.min(col1, col2) + 1;\r\n        const end = Math.max(col1, col2);\r\n        for (let i = start; i < end; i++) {\r\n          if (this.board[row1 * 8 + i] !== \"\") {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      } else if (col1 === col2) {\r\n        const start = Math.min(row1, row2) + 1;\r\n        const end = Math.max(row1, row2);\r\n        for (let i = start; i < end; i++) {\r\n          if (this.board[i * 8 + col1] !== \"\") {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    // Vérifier si un mouvement de cavalier est valide\r\n    isValidKnightMove(from, to) {\r\n      const row1 = Math.floor(from / 8);\r\n      const col1 = from % 8;\r\n      const row2 = Math.floor(to / 8);\r\n      const col2 = to % 8;\r\n\r\n      const rowDiff = Math.abs(row1 - row2);\r\n      const colDiff = Math.abs(col1 - col2);\r\n\r\n      return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);\r\n    },\r\n\r\n    // Vérifier si un mouvement de fou est valide\r\n    isValidBishopMove(from, to) {\r\n      const row1 = Math.floor(from / 8);\r\n      const col1 = from % 8;\r\n      const row2 = Math.floor(to / 8);\r\n      const col2 = to % 8;\r\n\r\n      return Math.abs(row1 - row2) === Math.abs(col1 - col2);\r\n    },\r\n\r\n    // Vérifier si un mouvement de reine est valide\r\n    isValidQueenMove(from, to) {\r\n      return this.isValidRookMove(from, to) || this.isValidBishopMove(from, to);\r\n    },\r\n\r\n    // Vérifier si un mouvement de roi est valide\r\n    isValidKingMove(from, to) {\r\n      const row1 = Math.floor(from / 8);\r\n      const col1 = from % 8;\r\n      const row2 = Math.floor(to / 8);\r\n      const col2 = to % 8;\r\n\r\n      return Math.abs(row1 - row2) <= 1 && Math.abs(col1 - col2) <= 1;\r\n    },\r\n\r\n    // Récupérer la classe CSS pour une case (pour les couleurs beige ou marron)\r\n    getSquareClass(index) {\r\n      const row = Math.floor(index / 8);\r\n      const col = index % 8;\r\n      return (row + col) % 2 === 0 ? 'beige' : 'brown';\r\n    },\r\n\r\n    // Vérifier si le roi est en échec\r\n    isKingInCheck(board, color) {\r\n      const kingPosition = this.findKingPosition(board, color);\r\n      return this.isSquareUnderAttack(board, kingPosition, color);\r\n    },\r\n\r\n    // Trouver la position du roi\r\n    findKingPosition(board, color) {\r\n      for (let i = 0; i < board.length; i++) {\r\n        if (board[i] === `${color}k`) {\r\n          return i;\r\n        }\r\n      }\r\n      return -1;\r\n    },\r\n\r\n    // Vérifier si une case est sous attaque\r\n    isSquareUnderAttack(board, squareIndex, color) {\r\n      const opponentColor = color === 'w' ? 'b' : 'w';\r\n      const pawnAttacks = this.getPawnAttacks(squareIndex, opponentColor);\r\n      for (const attack of pawnAttacks) {\r\n        if (board[attack] === `${opponentColor}p`) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      const knightAttacks = this.getKnightAttacks(squareIndex);\r\n      for (const attack of knightAttacks) {\r\n        if (board[attack] === `${opponentColor}n`) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      const straightAttacks = this.getStraightAttacks(squareIndex);\r\n      const diagonalAttacks = this.getDiagonalAttacks(squareIndex);\r\n\r\n      for (const attack of straightAttacks) {\r\n        if (board[attack] === `${opponentColor}r` || board[attack] === `${opponentColor}q`) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      for (const attack of diagonalAttacks) {\r\n        if (board[attack] === `${opponentColor}b` || board[attack] === `${opponentColor}q`) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    // Vérifier si c'est un échec et mat\r\n    isCheckmate(board, color) {\r\n      if (!this.isKingInCheck(board, color)) {\r\n        return false;\r\n      }\r\n\r\n      const possibleMoves = this.generateAllMoves(board, color);\r\n\r\n      for (const move of possibleMoves) {\r\n        const newBoard = this.applyMove(board, move);\r\n        if (!this.isKingInCheck(newBoard, color)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    },\r\n\r\n    // Générer tous les mouvements possibles\r\n    generateAllMoves(board, color) {\r\n      const moves = [];\r\n      for (let i = 0; i < board.length; i++) {\r\n        if (board[i] && board[i][0] === color) {\r\n          const pieceType = board[i][1];\r\n          if (pieceType === 'p') {\r\n            moves.push(...this.generatePawnMoves(i, color));\r\n          } else if (pieceType === 'r') {\r\n            moves.push(...this.generateRookMoves(i));\r\n          } else if (pieceType === 'n') {\r\n            moves.push(...this.generateKnightMoves(i));\r\n          } else if (pieceType === 'b') {\r\n            moves.push(...this.generateBishopMoves(i));\r\n          } else if (pieceType === 'q') {\r\n            moves.push(...this.generateQueenMoves(i));\r\n          } else if (pieceType === 'k') {\r\n            moves.push(...this.generateKingMoves(i));\r\n          }\r\n        }\r\n      }\r\n      return moves;\r\n    },\r\n\r\n    // Appliquer un mouvement à l'échiquier\r\n    applyMove(board, move) {\r\n      const newBoard = board.slice();\r\n      newBoard[move.to] = newBoard[move.from];\r\n      newBoard[move.from] = \"\";\r\n      return newBoard;\r\n    },\r\n\r\n    // Se déconnecter de la session\r\n    async logout() {\r\n      try {\r\n        await axios.post('http://localhost:8000/logout/');\r\n        localStorage.removeItem('userPseudo');\r\n        localStorage.removeItem('userEmail');\r\n        localStorage.removeItem('userNom');\r\n        localStorage.removeItem('userPrenom');\r\n        this.$router.push('/login');\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la déconnexion :\", error.response ? error.response.data : error.message);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.game-container {\r\n  display: flex;\r\n}\r\n\r\n.sidebar {\r\n  width: 200px;\r\n  background-color: #1f1f1f;\r\n  padding: 20px;\r\n  box-shadow: 2px 0 5px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.sidebar nav ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\n.sidebar nav ul li {\r\n  margin: 15px 0;\r\n}\r\n\r\n.sidebar nav ul li a {\r\n  color: #e0e0e0;\r\n  text-decoration: none;\r\n}\r\n\r\n.sidebar nav ul li a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.board-container {\r\n  flex-grow: 1;\r\n  padding: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.chessboard {\r\n  display: grid;\r\n  grid-template-columns: repeat(8, 80px);\r\n  grid-template-rows: repeat(8, 80px);\r\n  border: 2px solid #333;\r\n  width: 640px;\r\n  height: 640px;\r\n  margin: 20px auto;\r\n}\r\n\r\n.square {\r\n  width: 80px;\r\n  height: 80px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 24px;\r\n  border: 1px solid black;\r\n  position: relative;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.square:hover {\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.square.beige {\r\n  background-color: #f5f5dc;\r\n}\r\n\r\n.square.brown {\r\n  background-color: #8b4513;\r\n}\r\n\r\n.square.selected {\r\n  border: 3px solid #f39c12;\r\n}\r\n\r\n.piece {\r\n  width: 60%;\r\n  height: 60%;\r\n  object-fit: contain;\r\n  pointer-events: none;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}