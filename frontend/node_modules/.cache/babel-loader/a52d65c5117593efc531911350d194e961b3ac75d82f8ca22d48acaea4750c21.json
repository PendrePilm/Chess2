{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, withModifiers as _withModifiers, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"game-container\"\n};\nconst _hoisted_2 = {\n  class: \"sidebar\"\n};\nconst _hoisted_3 = {\n  class: \"board-container\"\n};\nconst _hoisted_4 = {\n  id: \"chessboard\",\n  class: \"chessboard\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = [\"src\"];\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"aside\", _hoisted_2, [_createElementVNode(\"nav\", null, [_createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, [_createVNode(_component_router_link, {\n    to: \"/menu\"\n  }, {\n    default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\"Accueil\")])),\n    _: 1 /* STABLE */\n  })]), _createElementVNode(\"li\", null, [_createVNode(_component_router_link, {\n    to: \"/parametres\"\n  }, {\n    default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\"Paramètres\")])),\n    _: 1 /* STABLE */\n  })]), _createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    href: \"#\",\n    onClick: _cache[0] || (_cache[0] = _withModifiers((...args) => $options.logout && $options.logout(...args), [\"prevent\"]))\n  }, \"Déconnexion\")])])])]), _createElementVNode(\"div\", _hoisted_3, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"Partie d'Échecs\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, \"Code de la partie : \" + _toDisplayString($props.gameCode), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Vous jouez les : \" + _toDisplayString($props.playerColor === 'w' ? 'Blancs' : 'Noirs'), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Tour actuel : \" + _toDisplayString($data.turn === 'w' ? 'Blancs' : 'Noirs'), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.board, (piece, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"square\", $options.getSquareClass(index)]),\n      onClick: $event => $options.handleSquareClick(index)\n    }, [piece ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: $data.pieceImages[piece],\n      class: \"piece\"\n    }, null, 8 /* PROPS */, _hoisted_6)) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.check ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, \"Échec!\")) : _createCommentVNode(\"v-if\", true), $data.checkmate ? (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \"Échec et mat!\")) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","id","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_router_link","to","default","_withCtx","_cache","_createTextVNode","_","href","onClick","_withModifiers","args","$options","logout","_hoisted_3","_toDisplayString","$props","gameCode","playerColor","$data","turn","_hoisted_4","_Fragment","_renderList","board","piece","index","_normalizeClass","getSquareClass","$event","handleSquareClick","src","pieceImages","_hoisted_6","_createCommentVNode","_hoisted_5","check","_hoisted_7","checkmate","_hoisted_8"],"sources":["C:\\wamp64\\www\\Chess\\frontend\\src\\components\\GameBoard.vue"],"sourcesContent":["<template>\r\n  <div class=\"game-container\">\r\n    <aside class=\"sidebar\">\r\n      <nav>\r\n        <ul>\r\n          <li><router-link to=\"/menu\">Accueil</router-link></li>\r\n          <li><router-link to=\"/parametres\">Paramètres</router-link></li>\r\n          <li><a href=\"#\" @click.prevent=\"logout\">Déconnexion</a></li>\r\n        </ul>\r\n      </nav>\r\n    </aside>\r\n\r\n    <div class=\"board-container\">\r\n      <h2>Partie d'Échecs</h2>\r\n      <p>Code de la partie : {{ gameCode }}</p>\r\n      <p>Vous jouez les : {{ playerColor === 'w' ? 'Blancs' : 'Noirs' }}</p>\r\n      <p>Tour actuel : {{ turn === 'w' ? 'Blancs' : 'Noirs' }}</p>\r\n\r\n      <div id=\"chessboard\" class=\"chessboard\">\r\n        <div\r\n          v-for=\"(piece, index) in board\"\r\n          :key=\"index\"\r\n          class=\"square\"\r\n          :class=\"getSquareClass(index)\"\r\n          @click=\"handleSquareClick(index)\"\r\n        >\r\n          <img v-if=\"piece\" :src=\"pieceImages[piece]\" class=\"piece\" />\r\n        </div>\r\n      </div>\r\n\r\n      <p v-if=\"check\">Échec!</p>\r\n      <p v-if=\"checkmate\">Échec et mat!</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: \"GameBoard\",\r\n  props: ['gameCode', 'playerColor'],\r\n  data() {\r\n    return {\r\n      board: [],\r\n      selectedSquare: null,\r\n      turn: \"w\", // \"w\" = blanc, \"b\" = noir\r\n      check: false,\r\n      checkmate: false,\r\n      pieceImages: {\r\n        wp: require('@/img/pions/w/pawn.png'),\r\n        bp: require('@/img/pions/b/pawn.png'),\r\n        wr: require('@/img/pions/w/rook.png'),\r\n        br: require('@/img/pions/b/rook.png'),\r\n        wn: require('@/img/pions/w/knight.png'),\r\n        bn: require('@/img/pions/b/knight.png'),\r\n        wb: require('@/img/pions/w/bishop.png'),\r\n        bb: require('@/img/pions/b/bishop.png'),\r\n        wq: require('@/img/pions/w/queen.png'),\r\n        bq: require('@/img/pions/b/queen.png'),\r\n        wk: require('@/img/pions/w/king.png'),\r\n        bk: require('@/img/pions/b/king.png'),\r\n      }\r\n    };\r\n  },\r\n  created() {\r\n    this.board = this.initializeBoard();\r\n  },\r\n  methods: {\r\n    // Initialiser le plateau de jeu avec les positions des pièces\r\n    initializeBoard() {\r\n      if (this.playerColor === 'b') {\r\n        return [\r\n          \"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\",\r\n          \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\",\r\n          \"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"\r\n        ];\r\n      } else {\r\n        return [\r\n          \"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\",\r\n          \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n          \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\",\r\n          \"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"\r\n        ];\r\n      }\r\n    },\r\n\r\n    // Gérer le clic sur une case du plateau\r\n    handleSquareClick(index) {\r\n      if (this.selectedSquare === null) {\r\n        if (this.board[index] && this.board[index][0] === this.turn) {\r\n          this.selectedSquare = index;\r\n        }\r\n      } else {\r\n        const validMove = this.isValidMove(this.selectedSquare, index);\r\n        if (validMove) {\r\n          this.board[index] = this.board[this.selectedSquare];\r\n          this.board[this.selectedSquare] = \"\";\r\n          this.selectedSquare = null;\r\n          this.turn = this.turn === \"w\" ? \"b\" : \"w\";\r\n\r\n          // Vérifier l'échec et l'échec et mat après le mouvement\r\n          this.check = this.isKingInCheck(this.board, this.turn);\r\n          this.checkmate = this.isCheckmate(this.board, this.turn);\r\n        } else {\r\n          this.selectedSquare = null;\r\n        }\r\n      }\r\n    },\r\n\r\n    // Vérifier si le mouvement est valide en fonction du type de pièce\r\n    isValidMove(from, to) {\r\n      const piece = this.board[from];\r\n      const targetPiece = this.board[to];\r\n\r\n      if (!piece) return false;\r\n\r\n      const pieceType = piece[1];\r\n      const pieceColor = piece[0];\r\n\r\n      if (targetPiece && targetPiece[0] === pieceColor) {\r\n        return false;\r\n      }\r\n\r\n      if (pieceType === 'p') {\r\n        return this.isValidPawnMove(from, to, pieceColor);\r\n      }\r\n\r\n      if (pieceType === 'r') {\r\n        return this.isValidRookMove(from, to);\r\n      }\r\n\r\n      if (pieceType === 'n') {\r\n        return this.isValidKnightMove(from, to);\r\n      }\r\n\r\n      if (pieceType === 'b') {\r\n        return this.isValidBishopMove(from, to);\r\n      }\r\n\r\n      if (pieceType === 'q') {\r\n        return this.isValidQueenMove(from, to);\r\n      }\r\n\r\n      if (pieceType === 'k') {\r\n        return this.isValidKingMove(from, to);\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    // Vérifier si un mouvement de pion est valide\r\n    isValidPawnMove(from, to, color) {\r\n      const direction = color === 'w' ? -1 : 1;\r\n      const row = Math.floor(from / 8);\r\n      const col = from % 8;\r\n      const targetRow = Math.floor(to / 8);\r\n      const targetCol = to % 8;\r\n\r\n      if (col === targetCol && targetRow === row + direction && this.board[to] === \"\") {\r\n        return true;\r\n      }\r\n\r\n      if (col === targetCol && targetRow === row + 2 * direction && row === (color === 'w' ? 6 : 1) && this.board[to] === \"\" && this.board[from + direction * 8] === \"\") {\r\n        return true;\r\n      }\r\n\r\n      if (Math.abs(col - targetCol) === 1 && targetRow === row + direction && this.board[to] !== \"\" && this.board[to][0] !== color) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    // Vérifier si un mouvement de tour est valide\r\n    isValidRookMove(from, to) {\r\n      const row1 = Math.floor(from / 8);\r\n      const col1 = from % 8;\r\n      const row2 = Math.floor(to / 8);\r\n      const col2 = to % 8;\r\n\r\n      if (row1 === row2) {\r\n        const start = Math.min(col1, col2) + 1;\r\n        const end = Math.max(col1, col2);\r\n        for (let i = start; i < end; i++) {\r\n          if (this.board[row1 * 8 + i] !== \"\") {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      } else if (col1 === col2) {\r\n        const start = Math.min(row1, row2) + 1;\r\n        const end = Math.max(row1, row2);\r\n        for (let i = start; i < end; i++) {\r\n          if (this.board[i * 8 + col1] !== \"\") {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    // Vérifier si un mouvement de cavalier est valide\r\n    isValidKnightMove(from, to) {\r\n      const row1 = Math.floor(from / 8);\r\n      const col1 = from % 8;\r\n      const row2 = Math.floor(to / 8);\r\n      const col2 = to % 8;\r\n\r\n      const rowDiff = Math.abs(row1 - row2);\r\n      const colDiff = Math.abs(col1 - col2);\r\n\r\n      return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);\r\n    },\r\n\r\n    // Vérifier si un mouvement de fou est valide\r\n    isValidBishopMove(from, to) {\r\n      const row1 = Math.floor(from / 8);\r\n      const col1 = from % 8;\r\n      const row2 = Math.floor(to / 8);\r\n      const col2 = to % 8;\r\n\r\n      return Math.abs(row1 - row2) === Math.abs(col1 - col2);\r\n    },\r\n\r\n    // Vérifier si un mouvement de reine est valide\r\n    isValidQueenMove(from, to) {\r\n      return this.isValidRookMove(from, to) || this.isValidBishopMove(from, to);\r\n    },\r\n\r\n    // Vérifier si un mouvement de roi est valide\r\n    isValidKingMove(from, to) {\r\n      const row1 = Math.floor(from / 8);\r\n      const col1 = from % 8;\r\n      const row2 = Math.floor(to / 8);\r\n      const col2 = to % 8;\r\n\r\n      return Math.abs(row1 - row2) <= 1 && Math.abs(col1 - col2) <= 1;\r\n    },\r\n\r\n    // Récupérer la classe CSS pour une case (pour les couleurs beige ou marron)\r\n    getSquareClass(index) {\r\n      const row = Math.floor(index / 8);\r\n      const col = index % 8;\r\n      return (row + col) % 2 === 0 ? 'beige' : 'brown';\r\n    },\r\n\r\n    // Vérifier si le roi est en échec\r\n    isKingInCheck(board, color) {\r\n      const kingPosition = this.findKingPosition(board, color);\r\n      return this.isSquareUnderAttack(board, kingPosition, color);\r\n    },\r\n\r\n    // Trouver la position du roi\r\n    findKingPosition(board, color) {\r\n      for (let i = 0; i < board.length; i++) {\r\n        if (board[i] === `${color}k`) {\r\n          return i;\r\n        }\r\n      }\r\n      return -1;\r\n    },\r\n\r\n    // Vérifier si une case est sous attaque\r\n    isSquareUnderAttack(board, squareIndex, color) {\r\n      const opponentColor = color === 'w' ? 'b' : 'w';\r\n      const pawnAttacks = this.getPawnAttacks(squareIndex, opponentColor);\r\n      for (const attack of pawnAttacks) {\r\n        if (board[attack] === `${opponentColor}p`) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      const knightAttacks = this.getKnightAttacks(squareIndex);\r\n      for (const attack of knightAttacks) {\r\n        if (board[attack] === `${opponentColor}n`) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      const straightAttacks = this.getStraightAttacks(squareIndex);\r\n      const diagonalAttacks = this.getDiagonalAttacks(squareIndex);\r\n\r\n      for (const attack of straightAttacks) {\r\n        if (board[attack] === `${opponentColor}r` || board[attack] === `${opponentColor}q`) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      for (const attack of diagonalAttacks) {\r\n        if (board[attack] === `${opponentColor}b` || board[attack] === `${opponentColor}q`) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    // Vérifier si c'est un échec et mat\r\n    isCheckmate(board, color) {\r\n      if (!this.isKingInCheck(board, color)) {\r\n        return false;\r\n      }\r\n\r\n      const possibleMoves = this.generateAllMoves(board, color);\r\n\r\n      for (const move of possibleMoves) {\r\n        const newBoard = this.applyMove(board, move);\r\n        if (!this.isKingInCheck(newBoard, color)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    },\r\n\r\n    // Générer tous les mouvements possibles\r\n    generateAllMoves(board, color) {\r\n      const moves = [];\r\n      for (let i = 0; i < board.length; i++) {\r\n        if (board[i] && board[i][0] === color) {\r\n          const pieceType = board[i][1];\r\n          if (pieceType === 'p') {\r\n            moves.push(...this.generatePawnMoves(i, color));\r\n          } else if (pieceType === 'r') {\r\n            moves.push(...this.generateRookMoves(i));\r\n          } else if (pieceType === 'n') {\r\n            moves.push(...this.generateKnightMoves(i));\r\n          } else if (pieceType === 'b') {\r\n            moves.push(...this.generateBishopMoves(i));\r\n          } else if (pieceType === 'q') {\r\n            moves.push(...this.generateQueenMoves(i));\r\n          } else if (pieceType === 'k') {\r\n            moves.push(...this.generateKingMoves(i));\r\n          }\r\n        }\r\n      }\r\n      return moves;\r\n    },\r\n\r\n    // Appliquer un mouvement à l'échiquier\r\n    applyMove(board, move) {\r\n      const newBoard = board.slice();\r\n      newBoard[move.to] = newBoard[move.from];\r\n      newBoard[move.from] = \"\";\r\n      return newBoard;\r\n    },\r\n\r\n    // Calculer les cases attaquées par un pion\r\n    getPawnAttacks(squareIndex, color) {\r\n      const direction = color === 'w' ? -1 : 1;\r\n      const col = squareIndex % 8;\r\n      const attacks = [];\r\n\r\n      if (col > 0) attacks.push(squareIndex - 1 + direction * 8);\r\n      if (col < 7) attacks.push(squareIndex + 1 + direction * 8);\r\n\r\n      return attacks;\r\n    },\r\n\r\n    // Calculer les cases attaquées par un cavalier\r\n    getKnightAttacks(squareIndex) {\r\n      const row = Math.floor(squareIndex / 8);\r\n      const col = squareIndex % 8;\r\n      const attacks = [];\r\n\r\n      const moves = [\r\n        [-2, -1], [-2, 1], [-1, -2], [-1, 2],\r\n        [1, -2], [1, 2], [2, -1], [2, 1]\r\n      ];\r\n\r\n      for (const [dRow, dCol] of moves) {\r\n        const newRow = row + dRow;\r\n        const newCol = col + dCol;\r\n        if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\r\n          attacks.push(newRow * 8 + newCol);\r\n        }\r\n      }\r\n\r\n      return attacks;\r\n    },\r\n\r\n    // Calculer les cases attaquées en ligne droite\r\n    getStraightAttacks(squareIndex) {\r\n      const row = Math.floor(squareIndex / 8);\r\n      const col = squareIndex % 8;\r\n      const attacks = [];\r\n\r\n      // Attaques horizontales\r\n      for (let c = 0; c < 8; c++) {\r\n        if (c !== col) attacks.push(row * 8 + c);\r\n      }\r\n\r\n      // Attaques verticales\r\n      for (let r = 0; r < 8; r++) {\r\n        if (r !== row) attacks.push(r * 8 + col);\r\n      }\r\n\r\n      return attacks;\r\n    },\r\n\r\n    // Calculer les cases attaquées en diagonale\r\n    getDiagonalAttacks(squareIndex) {\r\n      const row = Math.floor(squareIndex / 8);\r\n      const col = squareIndex % 8;\r\n      const attacks = [];\r\n\r\n      // Attaques diagonales\r\n      for (let r = 0; r < 8; r++) {\r\n        for (let c = 0; c < 8; c++) {\r\n          if (Math.abs(r - row) === Math.abs(c - col)) {\r\n            if (r !== row || c !== col) attacks.push(r * 8 + c);\r\n          }\r\n        }\r\n      }\r\n\r\n      return attacks;\r\n    },\r\n\r\n    // Générer tous les mouvements possibles pour un pion\r\n    generatePawnMoves(index, color) {\r\n      const direction = color === 'w' ? -1 : 1;\r\n      const row = Math.floor(index / 8);\r\n      const col = index % 8;\r\n      const moves = [];\r\n\r\n      // Déplacement d'une case en avant\r\n      const targetRow = row + direction;\r\n      if (targetRow >= 0 && targetRow < 8) {\r\n        const targetIndex = targetRow * 8 + col;\r\n        if (this.board[targetIndex] === \"\") {\r\n          moves.push({ from: index, to: targetIndex });\r\n        }\r\n      }\r\n\r\n      // Déplacement de deux cases en avant (seulement pour le premier mouvement)\r\n      if ((color === 'w' && row === 6) || (color === 'b' && row === 1)) {\r\n        const targetRow = row + 2 * direction;\r\n        if (targetRow >= 0 && targetRow < 8) {\r\n          const targetIndex = targetRow * 8 + col;\r\n          if (this.board[targetIndex] === \"\" && this.board[targetRow * 8 + col - direction * 8] === \"\") {\r\n            moves.push({ from: index, to: targetIndex });\r\n          }\r\n        }\r\n      }\r\n\r\n      // Capture en diagonale\r\n      for (const offset of [-1, 1]) {\r\n        const targetCol = col + offset;\r\n        if (targetCol >= 0 && targetCol < 8) {\r\n          const targetIndex = (row + direction) * 8 + targetCol;\r\n          if (this.board[targetIndex] !== \"\" && this.board[targetIndex][0] !== color) {\r\n            moves.push({ from: index, to: targetIndex });\r\n          }\r\n        }\r\n      }\r\n\r\n      return moves;\r\n    },\r\n\r\n    // Générer tous les mouvements possibles pour une tour\r\n    generateRookMoves(index) {\r\n      const row = Math.floor(index / 8);\r\n      const col = index % 8;\r\n      const moves = [];\r\n\r\n      // Mouvements horizontaux\r\n      for (let c = 0; c < 8; c++) {\r\n        if (c !== col) {\r\n          const targetIndex = row * 8 + c;\r\n          if (this.board[targetIndex] === \"\" || this.board[targetIndex][0] !== this.board[index][0]) {\r\n            moves.push({ from: index, to: targetIndex });\r\n          }\r\n        }\r\n      }\r\n\r\n      // Mouvements verticaux\r\n      for (let r = 0; r < 8; r++) {\r\n        if (r !== row) {\r\n          const targetIndex = r * 8 + col;\r\n          if (this.board[targetIndex] === \"\" || this.board[targetIndex][0] !== this.board[index][0]) {\r\n            moves.push({ from: index, to: targetIndex });\r\n          }\r\n        }\r\n      }\r\n\r\n      return moves;\r\n    },\r\n\r\n    // Générer tous les mouvements possibles pour un cavalier\r\n    generateKnightMoves(index) {\r\n      const row = Math.floor(index / 8);\r\n      const col = index % 8;\r\n      const moves = [];\r\n\r\n      const movesOffsets = [\r\n        [-2, -1], [-2, 1], [-1, -2], [-1, 2],\r\n        [1, -2], [1, 2], [2, -1], [2, 1]\r\n      ];\r\n\r\n      for (const [dRow, dCol] of movesOffsets) {\r\n        const targetRow = row + dRow;\r\n        const targetCol = col + dCol;\r\n        if (targetRow >= 0 && targetRow < 8 && targetCol >= 0 && targetCol < 8) {\r\n          const targetIndex = targetRow * 8 + targetCol;\r\n          if (this.board[targetIndex] === \"\" || this.board[targetIndex][0] !== this.board[index][0]) {\r\n            moves.push({ from: index, to: targetIndex });\r\n          }\r\n        }\r\n      }\r\n\r\n      return moves;\r\n    },\r\n\r\n    // Générer tous les mouvements possibles pour un fou\r\n    generateBishopMoves(index) {\r\n      const row = Math.floor(index / 8);\r\n      const col = index % 8;\r\n      const moves = [];\r\n\r\n      // Mouvements diagonaux\r\n      for (let r = 0; r < 8; r++) {\r\n        for (let c = 0; c < 8; c++) {\r\n          if (Math.abs(r - row) === Math.abs(c - col)) {\r\n            const targetIndex = r * 8 + c;\r\n            if (targetIndex !== index && (this.board[targetIndex] === \"\" || this.board[targetIndex][0] !== this.board[index][0])) {\r\n              moves.push({ from: index, to: targetIndex });\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return moves;\r\n    },\r\n\r\n    // Générer tous les mouvements possibles pour une reine\r\n    generateQueenMoves(index) {\r\n      return [...this.generateRookMoves(index), ...this.generateBishopMoves(index)];\r\n    },\r\n\r\n    // Générer tous les mouvements possibles pour un roi\r\n    generateKingMoves(index) {\r\n      const row = Math.floor(index / 8);\r\n      const col = index % 8;\r\n      const moves = [];\r\n\r\n      const movesOffsets = [\r\n        [-1, -1], [-1, 0], [-1, 1],\r\n        [0, -1],         [0, 1],\r\n        [1, -1], [1, 0], [1, 1]\r\n      ];\r\n\r\n      for (const [dRow, dCol] of movesOffsets) {\r\n        const targetRow = row + dRow;\r\n        const targetCol = col + dCol;\r\n        if (targetRow >= 0 && targetRow < 8 && targetCol >= 0 && targetCol < 8) {\r\n          const targetIndex = targetRow * 8 + targetCol;\r\n          if (this.board[targetIndex] === \"\" || this.board[targetIndex][0] !== this.board[index][0]) {\r\n            moves.push({ from: index, to: targetIndex });\r\n          }\r\n        }\r\n      }\r\n\r\n      return moves;\r\n    },\r\n\r\n    // Se déconnecter de la session\r\n    async logout() {\r\n      try {\r\n        await axios.post('http://localhost:8000/logout/');\r\n        localStorage.removeItem('userPseudo');\r\n        localStorage.removeItem('userEmail');\r\n        localStorage.removeItem('userNom');\r\n        localStorage.removeItem('userPrenom');\r\n        this.$router.push('/login');\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la déconnexion :\", error.response ? error.response.data : error.message);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.game-container {\r\n  display: flex;\r\n}\r\n\r\n.sidebar {\r\n  width: 200px;\r\n  background-color: #1f1f1f;\r\n  padding: 20px;\r\n  box-shadow: 2px 0 5px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.sidebar nav ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\n.sidebar nav ul li {\r\n  margin: 15px 0;\r\n}\r\n\r\n.sidebar nav ul li a {\r\n  color: #e0e0e0;\r\n  text-decoration: none;\r\n}\r\n\r\n.sidebar nav ul li a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.board-container {\r\n  flex-grow: 1;\r\n  padding: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.chessboard {\r\n  display: grid;\r\n  grid-template-columns: repeat(8, 80px);\r\n  grid-template-rows: repeat(8, 80px);\r\n  border: 2px solid #333;\r\n  width: 640px;\r\n  height: 640px;\r\n  margin: 20px auto;\r\n}\r\n\r\n.square {\r\n  width: 80px;\r\n  height: 80px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 24px;\r\n  border: 1px solid black;\r\n  position: relative;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.square:hover {\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.square.beige {\r\n  background-color: #f5f5dc;\r\n}\r\n\r\n.square.brown {\r\n  background-color: #8b4513;\r\n}\r\n\r\n.square.selected {\r\n  border: 3px solid #f39c12;\r\n}\r\n\r\n.piece {\r\n  width: 60%;\r\n  height: 60%;\r\n  object-fit: contain;\r\n  pointer-events: none;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAClBA,KAAK,EAAC;AAAS;;EAUjBA,KAAK,EAAC;AAAiB;;EAMrBC,EAAE,EAAC,YAAY;EAACD,KAAK,EAAC;;mBAlBjC;mBAAA;;EAAAE,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBACEC,mBAAA,CAgCM,OAhCNC,UAgCM,GA/BJC,mBAAA,CAQQ,SARRC,UAQQ,GAPND,mBAAA,CAMM,cALJA,mBAAA,CAIK,aAHHA,mBAAA,CAAsD,aAAlDE,YAAA,CAA6CC,sBAAA;IAAhCC,EAAE,EAAC;EAAO;IALrCC,OAAA,EAAAC,QAAA,CAKsC,MAAOC,MAAA,QAAAA,MAAA,OAL7CC,gBAAA,CAKsC,SAAO,E;IAL7CC,CAAA;QAMUT,mBAAA,CAA+D,aAA3DE,YAAA,CAAsDC,sBAAA;IAAzCC,EAAE,EAAC;EAAa;IAN3CC,OAAA,EAAAC,QAAA,CAM4C,MAAUC,MAAA,QAAAA,MAAA,OANtDC,gBAAA,CAM4C,YAAU,E;IANtDC,CAAA;QAOUT,mBAAA,CAA4D,aAAxDA,mBAAA,CAAmD;IAAhDU,IAAI,EAAC,GAAG;IAAEC,OAAK,EAAAJ,MAAA,QAAAA,MAAA,MAPhCK,cAAA,KAAAC,IAAA,KAO0CC,QAAA,CAAAC,MAAA,IAAAD,QAAA,CAAAC,MAAA,IAAAF,IAAA,CAAM;KAAE,aAAW,E,SAKzDb,mBAAA,CAoBM,OApBNgB,UAoBM,G,0BAnBJhB,mBAAA,CAAwB,YAApB,iBAAe,sBACnBA,mBAAA,CAAyC,WAAtC,sBAAoB,GAAAiB,gBAAA,CAAGC,MAAA,CAAAC,QAAQ,kBAClCnB,mBAAA,CAAsE,WAAnE,mBAAiB,GAAAiB,gBAAA,CAAGC,MAAA,CAAAE,WAAW,+CAClCpB,mBAAA,CAA4D,WAAzD,gBAAc,GAAAiB,gBAAA,CAAGI,KAAA,CAAAC,IAAI,+CAExBtB,mBAAA,CAUM,OAVNuB,UAUM,I,kBATJzB,mBAAA,CAQM0B,SAAA,QA3BdC,WAAA,CAoBmCJ,KAAA,CAAAK,KAAK,EApBxC,CAoBkBC,KAAK,EAAEC,KAAK;yBADtB9B,mBAAA,CAQM;MANHD,GAAG,EAAE+B,KAAK;MACXjC,KAAK,EAtBfkC,eAAA,EAsBgB,QAAQ,EACNf,QAAA,CAAAgB,cAAc,CAACF,KAAK;MAC3BjB,OAAK,EAAAoB,MAAA,IAAEjB,QAAA,CAAAkB,iBAAiB,CAACJ,KAAK;QAEpBD,KAAK,I,cAAhB7B,mBAAA,CAA4D;MA1BtED,GAAA;MA0B6BoC,GAAG,EAAEZ,KAAA,CAAAa,WAAW,CAACP,KAAK;MAAGhC,KAAK,EAAC;4BA1B5DwC,UAAA,KAAAC,mBAAA,e,yBAAAC,UAAA;oCA8BehB,KAAA,CAAAiB,KAAK,I,cAAdxC,mBAAA,CAA0B,KA9BhCyC,UAAA,EA8BsB,QAAM,KA9B5BH,mBAAA,gBA+Bef,KAAA,CAAAmB,SAAS,I,cAAlB1C,mBAAA,CAAqC,KA/B3C2C,UAAA,EA+B0B,eAAa,KA/BvCL,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}